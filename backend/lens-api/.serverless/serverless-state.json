{
  "service": {
    "service": "lens-api",
    "serviceObject": {
      "name": "lens-api"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs20.x",
      "region": "eu-north-1",
      "deploymentMethod": "direct",
      "iam": {
        "role": "arn:aws:iam::796973483684:role/LambdaDynamoDbRole"
      },
      "environment": {
        "DYNAMODB_TABLE": "TravelLensTable"
      },
      "httpApi": {
        "cors": true
      },
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "GetAllContinentsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/lens-api-dev-GetAllContinents"
            }
          },
          "AddContinentLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/lens-api-dev-AddContinent"
            }
          },
          "AddPlaceLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/lens-api-dev-AddPlace"
            }
          },
          "GetContinentLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/lens-api-dev-GetContinent"
            }
          },
          "DeletePlaceLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/lens-api-dev-DeletePlace"
            }
          },
          "UpdatePlaceLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/lens-api-dev-UpdatePlace"
            }
          },
          "UpdateContinentLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/lens-api-dev-UpdateContinent"
            }
          },
          "GetAllContinentsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-eu-north-1-193c9376-f19d",
                "S3Key": "serverless/lens-api/dev/1741349752432-2025-03-07T12:15:52.432Z/lens-api.zip"
              },
              "Handler": "functions/GetAllContinents/index.getAllContinents",
              "Runtime": "nodejs20.x",
              "FunctionName": "lens-api-dev-GetAllContinents",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_TABLE": "TravelLensTable"
                }
              },
              "Role": "arn:aws:iam::796973483684:role/LambdaDynamoDbRole"
            },
            "DependsOn": [
              "GetAllContinentsLogGroup"
            ]
          },
          "AddContinentLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-eu-north-1-193c9376-f19d",
                "S3Key": "serverless/lens-api/dev/1741349752432-2025-03-07T12:15:52.432Z/lens-api.zip"
              },
              "Handler": "functions/AddContinent/index.addContinent",
              "Runtime": "nodejs20.x",
              "FunctionName": "lens-api-dev-AddContinent",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_TABLE": "TravelLensTable"
                }
              },
              "Role": "arn:aws:iam::796973483684:role/LambdaDynamoDbRole"
            },
            "DependsOn": [
              "AddContinentLogGroup"
            ]
          },
          "AddPlaceLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-eu-north-1-193c9376-f19d",
                "S3Key": "serverless/lens-api/dev/1741349752432-2025-03-07T12:15:52.432Z/lens-api.zip"
              },
              "Handler": "functions/AddPlace/index.addPlace",
              "Runtime": "nodejs20.x",
              "FunctionName": "lens-api-dev-AddPlace",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_TABLE": "TravelLensTable"
                }
              },
              "Role": "arn:aws:iam::796973483684:role/LambdaDynamoDbRole"
            },
            "DependsOn": [
              "AddPlaceLogGroup"
            ]
          },
          "GetContinentLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-eu-north-1-193c9376-f19d",
                "S3Key": "serverless/lens-api/dev/1741349752432-2025-03-07T12:15:52.432Z/lens-api.zip"
              },
              "Handler": "functions/GetContinent/index.getContinent",
              "Runtime": "nodejs20.x",
              "FunctionName": "lens-api-dev-GetContinent",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_TABLE": "TravelLensTable"
                }
              },
              "Role": "arn:aws:iam::796973483684:role/LambdaDynamoDbRole"
            },
            "DependsOn": [
              "GetContinentLogGroup"
            ]
          },
          "DeletePlaceLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-eu-north-1-193c9376-f19d",
                "S3Key": "serverless/lens-api/dev/1741349752432-2025-03-07T12:15:52.432Z/lens-api.zip"
              },
              "Handler": "functions/DeletePlace/index.deletePlace",
              "Runtime": "nodejs20.x",
              "FunctionName": "lens-api-dev-DeletePlace",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_TABLE": "TravelLensTable"
                }
              },
              "Role": "arn:aws:iam::796973483684:role/LambdaDynamoDbRole"
            },
            "DependsOn": [
              "DeletePlaceLogGroup"
            ]
          },
          "UpdatePlaceLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-eu-north-1-193c9376-f19d",
                "S3Key": "serverless/lens-api/dev/1741349752432-2025-03-07T12:15:52.432Z/lens-api.zip"
              },
              "Handler": "functions/UpdatePlace/index.updatePlace",
              "Runtime": "nodejs20.x",
              "FunctionName": "lens-api-dev-UpdatePlace",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_TABLE": "TravelLensTable"
                }
              },
              "Role": "arn:aws:iam::796973483684:role/LambdaDynamoDbRole"
            },
            "DependsOn": [
              "UpdatePlaceLogGroup"
            ]
          },
          "UpdateContinentLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-eu-north-1-193c9376-f19d",
                "S3Key": "serverless/lens-api/dev/1741349752432-2025-03-07T12:15:52.432Z/lens-api.zip"
              },
              "Handler": "functions/UpdateContinent/index.updateContinent",
              "Runtime": "nodejs20.x",
              "FunctionName": "lens-api-dev-UpdateContinent",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_TABLE": "TravelLensTable"
                }
              },
              "Role": "arn:aws:iam::796973483684:role/LambdaDynamoDbRole"
            },
            "DependsOn": [
              "UpdateContinentLogGroup"
            ]
          },
          "GetAllContinentsLambdaVersionWXQQQnkgPsFhEQWPRq9xot4PCbNI5SUMNQWiqKWVE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAllContinentsLambdaFunction"
              },
              "CodeSha256": "eVp8dS+5S//cweynPb74WVGfyOsxTMkwLyFZrwoEqWE="
            }
          },
          "AddContinentLambdaVersionmt3UTojv2S6Gsibtk8LAdXBg0Uw6vGAZdtjB1k1Qfc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AddContinentLambdaFunction"
              },
              "CodeSha256": "eVp8dS+5S//cweynPb74WVGfyOsxTMkwLyFZrwoEqWE="
            }
          },
          "AddPlaceLambdaVersion79LkQt9yTREHqF5hRxTrVYw5bMRKnRcQ8jUmMP325Q": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AddPlaceLambdaFunction"
              },
              "CodeSha256": "eVp8dS+5S//cweynPb74WVGfyOsxTMkwLyFZrwoEqWE="
            }
          },
          "GetContinentLambdaVersion6kn3qME50nNFu24AcGnyqbNpsTKmr3Q84NLDv7BrXt8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetContinentLambdaFunction"
              },
              "CodeSha256": "eVp8dS+5S//cweynPb74WVGfyOsxTMkwLyFZrwoEqWE="
            }
          },
          "DeletePlaceLambdaVersionCFtr9DYsyq3yLd0obPwbifbABRh6MkCljSO0I5dXCLk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeletePlaceLambdaFunction"
              },
              "CodeSha256": "eVp8dS+5S//cweynPb74WVGfyOsxTMkwLyFZrwoEqWE="
            }
          },
          "UpdatePlaceLambdaVersionecvBBP1qRRlouM8VRPQRYhRzuJzXGZml82Q03P0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdatePlaceLambdaFunction"
              },
              "CodeSha256": "eVp8dS+5S//cweynPb74WVGfyOsxTMkwLyFZrwoEqWE="
            }
          },
          "UpdateContinentLambdaVersionLYIvMLUV8NJMZUpYtclgBs1DNCvDE9nP4tT4eeIFw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateContinentLambdaFunction"
              },
              "CodeSha256": "eVp8dS+5S//cweynPb74WVGfyOsxTMkwLyFZrwoEqWE="
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-lens-api",
              "ProtocolType": "HTTP",
              "CorsConfiguration": {
                "AllowHeaders": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "AllowMethods": [
                  "OPTIONS",
                  "GET",
                  "POST",
                  "DELETE",
                  "PUT"
                ],
                "AllowOrigins": [
                  "*"
                ]
              }
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              }
            }
          },
          "GetAllContinentsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAllContinentsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetAllContinents": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetAllContinentsLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetContinents": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /continents",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetAllContinents"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetAllContinents"
          },
          "AddContinentLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AddContinentLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationAddContinent": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AddContinentLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostContinent": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /continent",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationAddContinent"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationAddContinent"
          },
          "AddPlaceLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AddPlaceLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationAddPlace": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AddPlaceLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostPlace": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /place",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationAddPlace"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationAddPlace"
          },
          "GetContinentLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetContinentLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetContinent": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetContinentLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetContinentContinentVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /continent/{continent}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetContinent"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetContinent"
          },
          "DeletePlaceLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeletePlaceLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationDeletePlace": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"DeletePlaceLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeletePlaceContinentVarPlaceidVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /place/{continent}/{placeId}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationDeletePlace"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationDeletePlace"
          },
          "UpdatePlaceLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdatePlaceLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdatePlace": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UpdatePlaceLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutPlaceContinentVarPlaceidVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /place/{continent}/{placeId}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdatePlace"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdatePlace"
          },
          "UpdateContinentLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateContinentLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateContinent": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UpdateContinentLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutContinentContinentVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /continent/{continent}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateContinent"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateContinent"
          },
          "TravelLensTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "TravelLensTable",
              "AttributeDefinitions": [
                {
                  "AttributeName": "PK",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "SK",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "PK",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "SK",
                  "KeyType": "RANGE"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "serverless-framework-deployments-eu-north-1-193c9376-f19d",
            "Export": {
              "Name": "sls-lens-api-dev-ServerlessDeploymentBucketName"
            }
          },
          "GetAllContinentsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAllContinentsLambdaVersionWXQQQnkgPsFhEQWPRq9xot4PCbNI5SUMNQWiqKWVE"
            },
            "Export": {
              "Name": "sls-lens-api-dev-GetAllContinentsLambdaFunctionQualifiedArn"
            }
          },
          "AddContinentLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AddContinentLambdaVersionmt3UTojv2S6Gsibtk8LAdXBg0Uw6vGAZdtjB1k1Qfc"
            },
            "Export": {
              "Name": "sls-lens-api-dev-AddContinentLambdaFunctionQualifiedArn"
            }
          },
          "AddPlaceLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AddPlaceLambdaVersion79LkQt9yTREHqF5hRxTrVYw5bMRKnRcQ8jUmMP325Q"
            },
            "Export": {
              "Name": "sls-lens-api-dev-AddPlaceLambdaFunctionQualifiedArn"
            }
          },
          "GetContinentLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetContinentLambdaVersion6kn3qME50nNFu24AcGnyqbNpsTKmr3Q84NLDv7BrXt8"
            },
            "Export": {
              "Name": "sls-lens-api-dev-GetContinentLambdaFunctionQualifiedArn"
            }
          },
          "DeletePlaceLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeletePlaceLambdaVersionCFtr9DYsyq3yLd0obPwbifbABRh6MkCljSO0I5dXCLk"
            },
            "Export": {
              "Name": "sls-lens-api-dev-DeletePlaceLambdaFunctionQualifiedArn"
            }
          },
          "UpdatePlaceLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdatePlaceLambdaVersionecvBBP1qRRlouM8VRPQRYhRzuJzXGZml82Q03P0"
            },
            "Export": {
              "Name": "sls-lens-api-dev-UpdatePlaceLambdaFunctionQualifiedArn"
            }
          },
          "UpdateContinentLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateContinentLambdaVersionLYIvMLUV8NJMZUpYtclgBs1DNCvDE9nP4tT4eeIFw"
            },
            "Export": {
              "Name": "sls-lens-api-dev-UpdateContinentLambdaFunctionQualifiedArn"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-lens-api-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-lens-api-dev-HttpApiUrl"
            }
          }
        }
      },
      "vpc": {}
    },
    "pluginsData": {},
    "functions": {
      "GetAllContinents": {
        "handler": "functions/GetAllContinents/index.getAllContinents",
        "events": [
          {
            "httpApi": {
              "path": "/continents",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/continents"
          }
        ],
        "name": "lens-api-dev-GetAllContinents",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "GetAllContinentsLambdaVersionWXQQQnkgPsFhEQWPRq9xot4PCbNI5SUMNQWiqKWVE"
      },
      "AddContinent": {
        "handler": "functions/AddContinent/index.addContinent",
        "events": [
          {
            "httpApi": {
              "path": "/continent",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/continent"
          }
        ],
        "name": "lens-api-dev-AddContinent",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "AddContinentLambdaVersionmt3UTojv2S6Gsibtk8LAdXBg0Uw6vGAZdtjB1k1Qfc"
      },
      "AddPlace": {
        "handler": "functions/AddPlace/index.addPlace",
        "events": [
          {
            "httpApi": {
              "path": "/place",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/place"
          }
        ],
        "name": "lens-api-dev-AddPlace",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "AddPlaceLambdaVersion79LkQt9yTREHqF5hRxTrVYw5bMRKnRcQ8jUmMP325Q"
      },
      "GetContinent": {
        "handler": "functions/GetContinent/index.getContinent",
        "events": [
          {
            "httpApi": {
              "path": "/continent/{continent}",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/continent/{continent}"
          }
        ],
        "name": "lens-api-dev-GetContinent",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "GetContinentLambdaVersion6kn3qME50nNFu24AcGnyqbNpsTKmr3Q84NLDv7BrXt8"
      },
      "DeletePlace": {
        "handler": "functions/DeletePlace/index.deletePlace",
        "events": [
          {
            "httpApi": {
              "path": "/place/{continent}/{placeId}",
              "method": "delete"
            },
            "resolvedMethod": "DELETE",
            "resolvedPath": "/place/{continent}/{placeId}"
          }
        ],
        "name": "lens-api-dev-DeletePlace",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "DeletePlaceLambdaVersionCFtr9DYsyq3yLd0obPwbifbABRh6MkCljSO0I5dXCLk"
      },
      "UpdatePlace": {
        "handler": "functions/UpdatePlace/index.updatePlace",
        "events": [
          {
            "httpApi": {
              "path": "/place/{continent}/{placeId}",
              "method": "put"
            },
            "resolvedMethod": "PUT",
            "resolvedPath": "/place/{continent}/{placeId}"
          }
        ],
        "name": "lens-api-dev-UpdatePlace",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "UpdatePlaceLambdaVersionecvBBP1qRRlouM8VRPQRYhRzuJzXGZml82Q03P0"
      },
      "UpdateContinent": {
        "handler": "functions/UpdateContinent/index.updateContinent",
        "events": [
          {
            "httpApi": {
              "path": "/continent/{continent}",
              "method": "put"
            },
            "resolvedMethod": "PUT",
            "resolvedPath": "/continent/{continent}"
          }
        ],
        "name": "lens-api-dev-UpdateContinent",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "UpdateContinentLambdaVersionLYIvMLUV8NJMZUpYtclgBs1DNCvDE9nP4tT4eeIFw"
      }
    },
    "resources": {
      "Resources": {
        "TravelLensTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "TravelLensTable",
            "AttributeDefinitions": [
              {
                "AttributeName": "PK",
                "AttributeType": "S"
              },
              {
                "AttributeName": "SK",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "PK",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "SK",
                "KeyType": "RANGE"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless",
    "initialServerlessConfig": {
      "org": "studentkasia",
      "app": "lens-api",
      "service": "lens-api",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "app": "lens-api",
    "appId": null,
    "org": "studentkasia",
    "orgId": null,
    "layers": {},
    "artifact": "D:\\FU23\\TravelLans\\backend\\lens-api\\.serverless\\lens-api.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/lens-api/dev/1741349752432-2025-03-07T12:15:52.432Z",
    "artifact": "lens-api.zip"
  }
}