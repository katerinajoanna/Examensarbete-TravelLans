{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "GetAllContinentsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/lens-api-dev-GetAllContinents"
      }
    },
    "AddContinentLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/lens-api-dev-AddContinent"
      }
    },
    "AddPlaceLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/lens-api-dev-AddPlace"
      }
    },
    "GetContinentLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/lens-api-dev-GetContinent"
      }
    },
    "DeletePlaceLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/lens-api-dev-DeletePlace"
      }
    },
    "UpdatePlaceLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/lens-api-dev-UpdatePlace"
      }
    },
    "UpdateContinentLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/lens-api-dev-UpdateContinent"
      }
    },
    "GetAllContinentsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-eu-north-1-193c9376-f19d",
          "S3Key": "serverless/lens-api/dev/1741349752432-2025-03-07T12:15:52.432Z/lens-api.zip"
        },
        "Handler": "functions/GetAllContinents/index.getAllContinents",
        "Runtime": "nodejs20.x",
        "FunctionName": "lens-api-dev-GetAllContinents",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DYNAMODB_TABLE": "TravelLensTable"
          }
        },
        "Role": "arn:aws:iam::796973483684:role/LambdaDynamoDbRole"
      },
      "DependsOn": [
        "GetAllContinentsLogGroup"
      ]
    },
    "AddContinentLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-eu-north-1-193c9376-f19d",
          "S3Key": "serverless/lens-api/dev/1741349752432-2025-03-07T12:15:52.432Z/lens-api.zip"
        },
        "Handler": "functions/AddContinent/index.addContinent",
        "Runtime": "nodejs20.x",
        "FunctionName": "lens-api-dev-AddContinent",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DYNAMODB_TABLE": "TravelLensTable"
          }
        },
        "Role": "arn:aws:iam::796973483684:role/LambdaDynamoDbRole"
      },
      "DependsOn": [
        "AddContinentLogGroup"
      ]
    },
    "AddPlaceLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-eu-north-1-193c9376-f19d",
          "S3Key": "serverless/lens-api/dev/1741349752432-2025-03-07T12:15:52.432Z/lens-api.zip"
        },
        "Handler": "functions/AddPlace/index.addPlace",
        "Runtime": "nodejs20.x",
        "FunctionName": "lens-api-dev-AddPlace",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DYNAMODB_TABLE": "TravelLensTable"
          }
        },
        "Role": "arn:aws:iam::796973483684:role/LambdaDynamoDbRole"
      },
      "DependsOn": [
        "AddPlaceLogGroup"
      ]
    },
    "GetContinentLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-eu-north-1-193c9376-f19d",
          "S3Key": "serverless/lens-api/dev/1741349752432-2025-03-07T12:15:52.432Z/lens-api.zip"
        },
        "Handler": "functions/GetContinent/index.getContinent",
        "Runtime": "nodejs20.x",
        "FunctionName": "lens-api-dev-GetContinent",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DYNAMODB_TABLE": "TravelLensTable"
          }
        },
        "Role": "arn:aws:iam::796973483684:role/LambdaDynamoDbRole"
      },
      "DependsOn": [
        "GetContinentLogGroup"
      ]
    },
    "DeletePlaceLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-eu-north-1-193c9376-f19d",
          "S3Key": "serverless/lens-api/dev/1741349752432-2025-03-07T12:15:52.432Z/lens-api.zip"
        },
        "Handler": "functions/DeletePlace/index.deletePlace",
        "Runtime": "nodejs20.x",
        "FunctionName": "lens-api-dev-DeletePlace",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DYNAMODB_TABLE": "TravelLensTable"
          }
        },
        "Role": "arn:aws:iam::796973483684:role/LambdaDynamoDbRole"
      },
      "DependsOn": [
        "DeletePlaceLogGroup"
      ]
    },
    "UpdatePlaceLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-eu-north-1-193c9376-f19d",
          "S3Key": "serverless/lens-api/dev/1741349752432-2025-03-07T12:15:52.432Z/lens-api.zip"
        },
        "Handler": "functions/UpdatePlace/index.updatePlace",
        "Runtime": "nodejs20.x",
        "FunctionName": "lens-api-dev-UpdatePlace",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DYNAMODB_TABLE": "TravelLensTable"
          }
        },
        "Role": "arn:aws:iam::796973483684:role/LambdaDynamoDbRole"
      },
      "DependsOn": [
        "UpdatePlaceLogGroup"
      ]
    },
    "UpdateContinentLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-eu-north-1-193c9376-f19d",
          "S3Key": "serverless/lens-api/dev/1741349752432-2025-03-07T12:15:52.432Z/lens-api.zip"
        },
        "Handler": "functions/UpdateContinent/index.updateContinent",
        "Runtime": "nodejs20.x",
        "FunctionName": "lens-api-dev-UpdateContinent",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DYNAMODB_TABLE": "TravelLensTable"
          }
        },
        "Role": "arn:aws:iam::796973483684:role/LambdaDynamoDbRole"
      },
      "DependsOn": [
        "UpdateContinentLogGroup"
      ]
    },
    "GetAllContinentsLambdaVersionWXQQQnkgPsFhEQWPRq9xot4PCbNI5SUMNQWiqKWVE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetAllContinentsLambdaFunction"
        },
        "CodeSha256": "eVp8dS+5S//cweynPb74WVGfyOsxTMkwLyFZrwoEqWE="
      }
    },
    "AddContinentLambdaVersionmt3UTojv2S6Gsibtk8LAdXBg0Uw6vGAZdtjB1k1Qfc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AddContinentLambdaFunction"
        },
        "CodeSha256": "eVp8dS+5S//cweynPb74WVGfyOsxTMkwLyFZrwoEqWE="
      }
    },
    "AddPlaceLambdaVersion79LkQt9yTREHqF5hRxTrVYw5bMRKnRcQ8jUmMP325Q": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AddPlaceLambdaFunction"
        },
        "CodeSha256": "eVp8dS+5S//cweynPb74WVGfyOsxTMkwLyFZrwoEqWE="
      }
    },
    "GetContinentLambdaVersion6kn3qME50nNFu24AcGnyqbNpsTKmr3Q84NLDv7BrXt8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetContinentLambdaFunction"
        },
        "CodeSha256": "eVp8dS+5S//cweynPb74WVGfyOsxTMkwLyFZrwoEqWE="
      }
    },
    "DeletePlaceLambdaVersionCFtr9DYsyq3yLd0obPwbifbABRh6MkCljSO0I5dXCLk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeletePlaceLambdaFunction"
        },
        "CodeSha256": "eVp8dS+5S//cweynPb74WVGfyOsxTMkwLyFZrwoEqWE="
      }
    },
    "UpdatePlaceLambdaVersionecvBBP1qRRlouM8VRPQRYhRzuJzXGZml82Q03P0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdatePlaceLambdaFunction"
        },
        "CodeSha256": "eVp8dS+5S//cweynPb74WVGfyOsxTMkwLyFZrwoEqWE="
      }
    },
    "UpdateContinentLambdaVersionLYIvMLUV8NJMZUpYtclgBs1DNCvDE9nP4tT4eeIFw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateContinentLambdaFunction"
        },
        "CodeSha256": "eVp8dS+5S//cweynPb74WVGfyOsxTMkwLyFZrwoEqWE="
      }
    },
    "HttpApi": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Name": "dev-lens-api",
        "ProtocolType": "HTTP",
        "CorsConfiguration": {
          "AllowHeaders": [
            "Content-Type",
            "X-Amz-Date",
            "Authorization",
            "X-Api-Key",
            "X-Amz-Security-Token",
            "X-Amz-User-Agent",
            "X-Amzn-Trace-Id"
          ],
          "AllowMethods": [
            "OPTIONS",
            "GET",
            "POST",
            "DELETE",
            "PUT"
          ],
          "AllowOrigins": [
            "*"
          ]
        }
      }
    },
    "HttpApiStage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "StageName": "$default",
        "AutoDeploy": true,
        "DefaultRouteSettings": {
          "DetailedMetricsEnabled": false
        }
      }
    },
    "GetAllContinentsLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetAllContinentsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetAllContinents": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetAllContinentsLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetContinents": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /continents",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetAllContinents"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetAllContinents"
    },
    "AddContinentLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AddContinentLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationAddContinent": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "AddContinentLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostContinent": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /continent",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationAddContinent"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationAddContinent"
    },
    "AddPlaceLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AddPlaceLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationAddPlace": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "AddPlaceLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostPlace": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /place",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationAddPlace"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationAddPlace"
    },
    "GetContinentLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetContinentLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetContinent": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetContinentLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetContinentContinentVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /continent/{continent}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetContinent"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetContinent"
    },
    "DeletePlaceLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeletePlaceLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationDeletePlace": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "DeletePlaceLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteDeletePlaceContinentVarPlaceidVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "DELETE /place/{continent}/{placeId}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationDeletePlace"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationDeletePlace"
    },
    "UpdatePlaceLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdatePlaceLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationUpdatePlace": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "UpdatePlaceLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePutPlaceContinentVarPlaceidVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PUT /place/{continent}/{placeId}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationUpdatePlace"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationUpdatePlace"
    },
    "UpdateContinentLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateContinentLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationUpdateContinent": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "UpdateContinentLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePutContinentContinentVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PUT /continent/{continent}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationUpdateContinent"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationUpdateContinent"
    },
    "TravelLensTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "TravelLensTable",
        "AttributeDefinitions": [
          {
            "AttributeName": "PK",
            "AttributeType": "S"
          },
          {
            "AttributeName": "SK",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "PK",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "SK",
            "KeyType": "RANGE"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST"
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": "serverless-framework-deployments-eu-north-1-193c9376-f19d",
      "Export": {
        "Name": "sls-lens-api-dev-ServerlessDeploymentBucketName"
      }
    },
    "GetAllContinentsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetAllContinentsLambdaVersionWXQQQnkgPsFhEQWPRq9xot4PCbNI5SUMNQWiqKWVE"
      },
      "Export": {
        "Name": "sls-lens-api-dev-GetAllContinentsLambdaFunctionQualifiedArn"
      }
    },
    "AddContinentLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AddContinentLambdaVersionmt3UTojv2S6Gsibtk8LAdXBg0Uw6vGAZdtjB1k1Qfc"
      },
      "Export": {
        "Name": "sls-lens-api-dev-AddContinentLambdaFunctionQualifiedArn"
      }
    },
    "AddPlaceLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AddPlaceLambdaVersion79LkQt9yTREHqF5hRxTrVYw5bMRKnRcQ8jUmMP325Q"
      },
      "Export": {
        "Name": "sls-lens-api-dev-AddPlaceLambdaFunctionQualifiedArn"
      }
    },
    "GetContinentLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetContinentLambdaVersion6kn3qME50nNFu24AcGnyqbNpsTKmr3Q84NLDv7BrXt8"
      },
      "Export": {
        "Name": "sls-lens-api-dev-GetContinentLambdaFunctionQualifiedArn"
      }
    },
    "DeletePlaceLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeletePlaceLambdaVersionCFtr9DYsyq3yLd0obPwbifbABRh6MkCljSO0I5dXCLk"
      },
      "Export": {
        "Name": "sls-lens-api-dev-DeletePlaceLambdaFunctionQualifiedArn"
      }
    },
    "UpdatePlaceLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdatePlaceLambdaVersionecvBBP1qRRlouM8VRPQRYhRzuJzXGZml82Q03P0"
      },
      "Export": {
        "Name": "sls-lens-api-dev-UpdatePlaceLambdaFunctionQualifiedArn"
      }
    },
    "UpdateContinentLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateContinentLambdaVersionLYIvMLUV8NJMZUpYtclgBs1DNCvDE9nP4tT4eeIFw"
      },
      "Export": {
        "Name": "sls-lens-api-dev-UpdateContinentLambdaFunctionQualifiedArn"
      }
    },
    "HttpApiId": {
      "Description": "Id of the HTTP API",
      "Value": {
        "Ref": "HttpApi"
      },
      "Export": {
        "Name": "sls-lens-api-dev-HttpApiId"
      }
    },
    "HttpApiUrl": {
      "Description": "URL of the HTTP API",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "HttpApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            }
          ]
        ]
      },
      "Export": {
        "Name": "sls-lens-api-dev-HttpApiUrl"
      }
    }
  }
}